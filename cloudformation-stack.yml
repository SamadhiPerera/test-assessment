#template format version
AWSTemplateFormatVersion: '2010-09-09'
Description:  Cloud Formation Stack
Metadata: {
    "Version": "v1.0",
    "Comments": "Created by Samadhi Tharaka Perera"
  }

Resources:
  # First we need to create a VPC:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.10.0/24
      AvailabilityZone: ap-south-1a    

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.50.0/24
      AvailabilityZone: ap-south-1b
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
 
  PublicRoute:  
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway  

 # Attach the public, private subnets to route table:   
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable
  
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref RouteTable
  
  # Association (RDS database with Subnets)
  DBSubnetGrp:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "The RDS DB Instance Identifier"
      SubnetIds:
        - !Ref PrivateSubnet
        - !Ref PublicSubnet

  WebServer:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0c1a7f89451184c8b
      KeyName: test_assesment
      SecurityGroups:
        - !Ref WebServerSG
      UserData: !Base64 |
        #!/bin/bash
        apt-get update -y
        sudo apt-get update -y
        sudo apt-get install apt-transport-https ca-certificates curl gnupg lsb-release -y

        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

        echo \
        "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
        $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

        sudo apt-get update -y
        sudo apt-get install docker-ce docker-ce-cli containerd.io -y
        sudo apt-cache madison docker-ce
        sudo apt-get install docker-ce=<VERSION_STRING> docker-ce-cli=<VERSION_STRING> containerd.io
        sudo systemctl daemon-reload
        sudo systemctl restart docker

        snap install docker
        apt  install docker-compose -y

        apt install git -y
        sudo git clone https://github.com/SamadhiPerera/test-assessment
        cd test-assessment/

        docker-compose up

  
  WebServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: for the web server that allow ssh, http and docker ports
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '3000'
        ToPort: '3000'
        CidrIp: 0.0.0.0/0
 
